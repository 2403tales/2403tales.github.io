import{S as Xt,i as Yt,s as Vt,C as vn,w as Zt,x as so,y as ao,z as eo,A as bt,q as no,o as to,B as oo,P as _t,e as l,t as o,k as c,c as r,a as u,h as p,d as a,m as i,b as v,g as t,I as e,M as po}from"./vendor-e6930037.js";import{P as lo}from"./_posts-0ccc0035.js";function ro(q){let f,w,E,h,k,y,G,ws,$a,Ua,Es,za,qa,xs,Ga,Na,Qs,H,yt=`<code class="language-jsx">idx <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// Sorts in ascending order</span></code>`,Ks,N,Qa,Xs,Q,Ka,Ys,K,Xa,Vs,X,Ya,Zs,Y,Va,sa,L,wt='<code class="language-jsx">ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code>',aa,V,Za,ea,O,Et='<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">YourComponent</span></span> <span class="token attr-name">id_list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ids<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span></code>',na,b,se,Ps,ae,ee,Ss,ne,te,Is,oe,pe,js,le,re,ta,Z,ue,oa,x,ce,Ts,ie,fe,Cs,ke,me,pa,ss,de,la,D,xt=`<code class="language-jsx">idx <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
new_idx <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_idx<span class="token punctuation">)</span></code>`,ra,as,he,ua,R,Pt='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> </code>',ca,es,ve,ia,ns,be,fa,_,_e,Hs,ye,we,Ls,Ee,xe,Os,Pe,Se,ka,J,St=`<code class="language-jsx">idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
new_idx <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_idx<span class="token punctuation">)</span></code>`,ma,ts,Ie,da,M,It='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></code>',ha,os,je,va,T,Te,Ds,Ce,He,ba,g,jt='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b</code>',_a,m,Le,Rs,Oe,De,Js,Re,Je,Ms,Me,ge,gs,Be,We,Bs,Fe,Ae,Ws,$e,Ue,Fs,ze,qe,As,Ge,Ne,ya,ps,Qe,wa,B,Tt='<code class="language-jsx">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code>',Ea,ls,Ke,xa,W,Ct='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b</code>',Pa,rs,Xe,Sa,F,Ht=`<code class="language-jsx"><span class="token comment">// Showing all comparisons for sake of clarity. </span>
<span class="token comment">// Under the hood, sorting algorithm won't run the comparator on all possible pairs</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">11</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">10</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">1</span></code>`,Ia,us,Ye,ja,P,$s,Ve,Ze,Us,sn,an,zs,en,Ta,cs,nn,Ca,A,Lt='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></code>',Ha,is,tn,La,$,Ot='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a <span class="token comment">// Any guesses on how it will affect the output?</span></code>',Oa,fs,on,Da,U,Dt=`<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">11</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">10</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span></code>`,Ra,ks,pn,Ja,S,qs,ln,rn,Gs,un,cn,Ns,fn,Ma,ms,kn,ga,z,Rt='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code>',Ba,ds,mn,Wa,hs,dn,Fa,vs,hn;return{c(){f=l("h1"),w=o("JS Quirks: Sorting array of numbers"),E=c(),h=l("p"),k=l("strong"),y=o("TL;DR:"),G=o(" If you\u2019re trying to sort an array of numbers in JS, pass a comparison function. Otherwise, it will consider the datatype of elements as a "),ws=l("code"),$a=o("string"),Ua=o(" and will sort based on the first character (So basically, "),Es=l("code"),za=o("12"),qa=o(" will come before "),xs=l("code"),Ga=o("2"),Na=o("). Here\u2019s how you pass a comparison function"),Qs=c(),H=l("pre"),Ks=c(),N=l("h2"),Qa=o("Background"),Xs=c(),Q=l("p"),Ka=o("Imagine sitting on your chair, developing a UI for your client. Work is progressing at a steady pace, and you\u2019re trying to figure out a way to optimize the rendering of a component."),Ys=c(),K=l("p"),Xa=o("Suddenly it hits you that if you sort the array you\u2019re sending to your component, then you might be able to reduce the rendering time and improve the UX simultaneously. So you fold your shirt and get started on the task."),Vs=c(),X=l("h2"),Ya=o("Problem Statement"),Zs=c(),Y=l("p"),Va=o("The task is very simple. Given an array"),sa=c(),L=l("pre"),aa=c(),V=l("p"),Za=o("Sort it and pass it to your component"),ea=c(),O=l("pre"),na=c(),b=l("p"),se=o("The above snippet should do the job. Right? The code looks intuitive, and I checked "),Ps=l("code"),ae=o("sort"),ee=o(" function returns the sorted array. So it should work. But it doesn\u2019t! Something fishy happens. For some reason, "),Ss=l("code"),ne=o("12"),te=o(" comes between "),Is=l("code"),oe=o("1"),pe=o(" and "),js=l("code"),le=o("2"),re=o(". I should also mention that most of my inputs were in the range 1 - 10, and it was unlikely to encounter a number greater than 10 (they were page numbers if you\u2019re curious)."),ta=c(),Z=l("h2"),ue=o("The hustle"),oa=c(),x=l("p"),ce=o("Based on the output, it was obvious that the array was sorted in lexicographic order. But why? I double-checked the API response, and it was returning integers. I double-checked the code fetching the API response, it wasn\u2019t doing any explicit "),Ts=l("code"),ie=o("type"),fe=o(" conversions. I checked the involved components and didn\u2019t find any explicit "),Cs=l("code"),ke=o("type"),me=o(" conversions there too."),pa=c(),ss=l("p"),de=o("Finally, being frustrated after 2 hours of debugging, I just opened by browser console and ran these"),la=c(),D=l("pre"),ra=c(),as=l("p"),he=o("To my awful surprise, I found this as output"),ua=c(),R=l("pre"),ca=c(),es=l("p"),ve=o("WTF JS! WTF. Why tf you are sorting an integer array lexicographically?"),ia=c(),ns=l("h2"),be=o("Solution"),fa=c(),_=l("p"),_e=o("I never got the answer to the "),Hs=l("code"),ye=o("Why?"),we=o(" JS chooses to do this, but I found out the way to sort numerical arrays correctly. While calling the "),Ls=l("code"),Ee=o("sort"),xe=o(" function, you have to pass a comparator (The good old "),Os=l("code"),Pe=o("Java"),Se=o(" way). So, the correct syntax would be"),ka=c(),J=l("pre"),ma=c(),ts=l("p"),Ie=o("which gives the correct output"),da=c(),M=l("pre"),ha=c(),os=l("h3"),je=o("Comparator"),va=c(),T=l("p"),Te=o("As the name suggests, Comparator is a function used to "),Ds=l("em"),Ce=o("compare"),He=o(" the elements of the array. In the above example, the comparator was"),ba=c(),g=l("pre"),_a=c(),m=l("p"),Le=o("If the output of the comparator is negative, then it means that "),Rs=l("code"),Oe=o("a"),De=o(" is lesser than "),Js=l("code"),Re=o("b"),Je=o(", and hence "),Ms=l("code"),Me=o("a"),ge=o(" should come before "),gs=l("code"),Be=o("b"),We=o(" in the sorted array. Conversely, if it is positive, then "),Bs=l("code"),Fe=o("a"),Ae=o(" is greater than "),Ws=l("code"),$e=o("b"),Ue=o(", and "),Fs=l("code"),ze=o("a"),qe=o(" should come after "),As=l("code"),Ge=o("b"),Ne=o(" in the sorted array."),ya=c(),ps=l("p"),Qe=o("E.g.: Consider"),wa=c(),B=l("pre"),Ea=c(),ls=l("p"),Ke=o("as input, and"),xa=c(),W=l("pre"),Pa=c(),rs=l("p"),Xe=o("as our comparator. Here are the possible comparisons"),Sa=c(),F=l("pre"),Ia=c(),us=l("p"),Ye=o("The above comparisons tell us that"),ja=c(),P=l("ul"),$s=l("li"),Ve=o("1 will come before 12"),Ze=c(),Us=l("li"),sn=o("2 will come before 12"),an=c(),zs=l("li"),en=o("1 will come before 12"),Ta=c(),cs=l("p"),nn=o("Hence, the final answer you will get is"),Ca=c(),A=l("pre"),Ha=c(),is=l("p"),tn=o("Now, just for fun, let\u2019s tweak the comparator to this"),La=c(),$=l("pre"),Oa=c(),fs=l("p"),on=o("For the same input, we will get the following comparisons"),Da=c(),U=l("pre"),Ra=c(),ks=l("p"),pn=o("Based on this, we can conclude that"),Ja=c(),S=l("ul"),qs=l("li"),ln=o("1 will come after 12"),rn=c(),Gs=l("li"),un=o("2 will come after 12"),cn=c(),Ns=l("li"),fn=o("1 will come after 2"),Ma=c(),ms=l("p"),kn=o("Hence the final answer, in this case, will be"),ga=c(),z=l("pre"),Ba=c(),ds=l("p"),mn=o("which is the input array sorted in descending order."),Wa=c(),hs=l("h2"),dn=o("Conclusion"),Fa=c(),vs=l("p"),hn=o("Ideally, JS should\u2019ve sorted an array numerically if all the elements were numbers. But that\u2019s not something in our control. So we have to work with the tools we have. Comparators give us a powerful way of controlling the order of elements after sorting. Knowing how (and when) to use them may save you from writing a few extra lines of code, and maybe a few hours of debugging and cursing at JS."),this.h()},l(s){f=r(s,"H1",{});var n=u(f);w=p(n,"JS Quirks: Sorting array of numbers"),n.forEach(a),E=i(s),h=r(s,"P",{});var j=u(h);k=r(j,"STRONG",{});var _n=u(k);y=p(_n,"TL;DR:"),_n.forEach(a),G=p(j," If you\u2019re trying to sort an array of numbers in JS, pass a comparison function. Otherwise, it will consider the datatype of elements as a "),ws=r(j,"CODE",{});var yn=u(ws);$a=p(yn,"string"),yn.forEach(a),Ua=p(j," and will sort based on the first character (So basically, "),Es=r(j,"CODE",{});var wn=u(Es);za=p(wn,"12"),wn.forEach(a),qa=p(j," will come before "),xs=r(j,"CODE",{});var En=u(xs);Ga=p(En,"2"),En.forEach(a),Na=p(j,"). Here\u2019s how you pass a comparison function"),j.forEach(a),Qs=i(s),H=r(s,"PRE",{class:!0});var Jt=u(H);Jt.forEach(a),Ks=i(s),N=r(s,"H2",{});var xn=u(N);Qa=p(xn,"Background"),xn.forEach(a),Xs=i(s),Q=r(s,"P",{});var Pn=u(Q);Ka=p(Pn,"Imagine sitting on your chair, developing a UI for your client. Work is progressing at a steady pace, and you\u2019re trying to figure out a way to optimize the rendering of a component."),Pn.forEach(a),Ys=i(s),K=r(s,"P",{});var Sn=u(K);Xa=p(Sn,"Suddenly it hits you that if you sort the array you\u2019re sending to your component, then you might be able to reduce the rendering time and improve the UX simultaneously. So you fold your shirt and get started on the task."),Sn.forEach(a),Vs=i(s),X=r(s,"H2",{});var In=u(X);Ya=p(In,"Problem Statement"),In.forEach(a),Zs=i(s),Y=r(s,"P",{});var jn=u(Y);Va=p(jn,"The task is very simple. Given an array"),jn.forEach(a),sa=i(s),L=r(s,"PRE",{class:!0});var Mt=u(L);Mt.forEach(a),aa=i(s),V=r(s,"P",{});var Tn=u(V);Za=p(Tn,"Sort it and pass it to your component"),Tn.forEach(a),ea=i(s),O=r(s,"PRE",{class:!0});var gt=u(O);gt.forEach(a),na=i(s),b=r(s,"P",{});var I=u(b);se=p(I,"The above snippet should do the job. Right? The code looks intuitive, and I checked "),Ps=r(I,"CODE",{});var Cn=u(Ps);ae=p(Cn,"sort"),Cn.forEach(a),ee=p(I," function returns the sorted array. So it should work. But it doesn\u2019t! Something fishy happens. For some reason, "),Ss=r(I,"CODE",{});var Hn=u(Ss);ne=p(Hn,"12"),Hn.forEach(a),te=p(I," comes between "),Is=r(I,"CODE",{});var Ln=u(Is);oe=p(Ln,"1"),Ln.forEach(a),pe=p(I," and "),js=r(I,"CODE",{});var On=u(js);le=p(On,"2"),On.forEach(a),re=p(I,". I should also mention that most of my inputs were in the range 1 - 10, and it was unlikely to encounter a number greater than 10 (they were page numbers if you\u2019re curious)."),I.forEach(a),ta=i(s),Z=r(s,"H2",{});var Dn=u(Z);ue=p(Dn,"The hustle"),Dn.forEach(a),oa=i(s),x=r(s,"P",{});var bs=u(x);ce=p(bs,"Based on the output, it was obvious that the array was sorted in lexicographic order. But why? I double-checked the API response, and it was returning integers. I double-checked the code fetching the API response, it wasn\u2019t doing any explicit "),Ts=r(bs,"CODE",{});var Rn=u(Ts);ie=p(Rn,"type"),Rn.forEach(a),fe=p(bs," conversions. I checked the involved components and didn\u2019t find any explicit "),Cs=r(bs,"CODE",{});var Jn=u(Cs);ke=p(Jn,"type"),Jn.forEach(a),me=p(bs," conversions there too."),bs.forEach(a),pa=i(s),ss=r(s,"P",{});var Mn=u(ss);de=p(Mn,"Finally, being frustrated after 2 hours of debugging, I just opened by browser console and ran these"),Mn.forEach(a),la=i(s),D=r(s,"PRE",{class:!0});var Bt=u(D);Bt.forEach(a),ra=i(s),as=r(s,"P",{});var gn=u(as);he=p(gn,"To my awful surprise, I found this as output"),gn.forEach(a),ua=i(s),R=r(s,"PRE",{class:!0});var Wt=u(R);Wt.forEach(a),ca=i(s),es=r(s,"P",{});var Bn=u(es);ve=p(Bn,"WTF JS! WTF. Why tf you are sorting an integer array lexicographically?"),Bn.forEach(a),ia=i(s),ns=r(s,"H2",{});var Wn=u(ns);be=p(Wn,"Solution"),Wn.forEach(a),fa=i(s),_=r(s,"P",{});var C=u(_);_e=p(C,"I never got the answer to the "),Hs=r(C,"CODE",{});var Fn=u(Hs);ye=p(Fn,"Why?"),Fn.forEach(a),we=p(C," JS chooses to do this, but I found out the way to sort numerical arrays correctly. While calling the "),Ls=r(C,"CODE",{});var An=u(Ls);Ee=p(An,"sort"),An.forEach(a),xe=p(C," function, you have to pass a comparator (The good old "),Os=r(C,"CODE",{});var $n=u(Os);Pe=p($n,"Java"),$n.forEach(a),Se=p(C," way). So, the correct syntax would be"),C.forEach(a),ka=i(s),J=r(s,"PRE",{class:!0});var Ft=u(J);Ft.forEach(a),ma=i(s),ts=r(s,"P",{});var Un=u(ts);Ie=p(Un,"which gives the correct output"),Un.forEach(a),da=i(s),M=r(s,"PRE",{class:!0});var At=u(M);At.forEach(a),ha=i(s),os=r(s,"H3",{});var zn=u(os);je=p(zn,"Comparator"),zn.forEach(a),va=i(s),T=r(s,"P",{});var Aa=u(T);Te=p(Aa,"As the name suggests, Comparator is a function used to "),Ds=r(Aa,"EM",{});var qn=u(Ds);Ce=p(qn,"compare"),qn.forEach(a),He=p(Aa," the elements of the array. In the above example, the comparator was"),Aa.forEach(a),ba=i(s),g=r(s,"PRE",{class:!0});var $t=u(g);$t.forEach(a),_a=i(s),m=r(s,"P",{});var d=u(m);Le=p(d,"If the output of the comparator is negative, then it means that "),Rs=r(d,"CODE",{});var Gn=u(Rs);Oe=p(Gn,"a"),Gn.forEach(a),De=p(d," is lesser than "),Js=r(d,"CODE",{});var Nn=u(Js);Re=p(Nn,"b"),Nn.forEach(a),Je=p(d,", and hence "),Ms=r(d,"CODE",{});var Qn=u(Ms);Me=p(Qn,"a"),Qn.forEach(a),ge=p(d," should come before "),gs=r(d,"CODE",{});var Kn=u(gs);Be=p(Kn,"b"),Kn.forEach(a),We=p(d," in the sorted array. Conversely, if it is positive, then "),Bs=r(d,"CODE",{});var Xn=u(Bs);Fe=p(Xn,"a"),Xn.forEach(a),Ae=p(d," is greater than "),Ws=r(d,"CODE",{});var Yn=u(Ws);$e=p(Yn,"b"),Yn.forEach(a),Ue=p(d,", and "),Fs=r(d,"CODE",{});var Vn=u(Fs);ze=p(Vn,"a"),Vn.forEach(a),qe=p(d," should come after "),As=r(d,"CODE",{});var Zn=u(As);Ge=p(Zn,"b"),Zn.forEach(a),Ne=p(d," in the sorted array."),d.forEach(a),ya=i(s),ps=r(s,"P",{});var st=u(ps);Qe=p(st,"E.g.: Consider"),st.forEach(a),wa=i(s),B=r(s,"PRE",{class:!0});var Ut=u(B);Ut.forEach(a),Ea=i(s),ls=r(s,"P",{});var at=u(ls);Ke=p(at,"as input, and"),at.forEach(a),xa=i(s),W=r(s,"PRE",{class:!0});var zt=u(W);zt.forEach(a),Pa=i(s),rs=r(s,"P",{});var et=u(rs);Xe=p(et,"as our comparator. Here are the possible comparisons"),et.forEach(a),Sa=i(s),F=r(s,"PRE",{class:!0});var qt=u(F);qt.forEach(a),Ia=i(s),us=r(s,"P",{});var nt=u(us);Ye=p(nt,"The above comparisons tell us that"),nt.forEach(a),ja=i(s),P=r(s,"UL",{});var _s=u(P);$s=r(_s,"LI",{});var tt=u($s);Ve=p(tt,"1 will come before 12"),tt.forEach(a),Ze=i(_s),Us=r(_s,"LI",{});var ot=u(Us);sn=p(ot,"2 will come before 12"),ot.forEach(a),an=i(_s),zs=r(_s,"LI",{});var pt=u(zs);en=p(pt,"1 will come before 12"),pt.forEach(a),_s.forEach(a),Ta=i(s),cs=r(s,"P",{});var lt=u(cs);nn=p(lt,"Hence, the final answer you will get is"),lt.forEach(a),Ca=i(s),A=r(s,"PRE",{class:!0});var Gt=u(A);Gt.forEach(a),Ha=i(s),is=r(s,"P",{});var rt=u(is);tn=p(rt,"Now, just for fun, let\u2019s tweak the comparator to this"),rt.forEach(a),La=i(s),$=r(s,"PRE",{class:!0});var Nt=u($);Nt.forEach(a),Oa=i(s),fs=r(s,"P",{});var ut=u(fs);on=p(ut,"For the same input, we will get the following comparisons"),ut.forEach(a),Da=i(s),U=r(s,"PRE",{class:!0});var Qt=u(U);Qt.forEach(a),Ra=i(s),ks=r(s,"P",{});var ct=u(ks);pn=p(ct,"Based on this, we can conclude that"),ct.forEach(a),Ja=i(s),S=r(s,"UL",{});var ys=u(S);qs=r(ys,"LI",{});var it=u(qs);ln=p(it,"1 will come after 12"),it.forEach(a),rn=i(ys),Gs=r(ys,"LI",{});var ft=u(Gs);un=p(ft,"2 will come after 12"),ft.forEach(a),cn=i(ys),Ns=r(ys,"LI",{});var kt=u(Ns);fn=p(kt,"1 will come after 2"),kt.forEach(a),ys.forEach(a),Ma=i(s),ms=r(s,"P",{});var mt=u(ms);kn=p(mt,"Hence the final answer, in this case, will be"),mt.forEach(a),ga=i(s),z=r(s,"PRE",{class:!0});var Kt=u(z);Kt.forEach(a),Ba=i(s),ds=r(s,"P",{});var dt=u(ds);mn=p(dt,"which is the input array sorted in descending order."),dt.forEach(a),Wa=i(s),hs=r(s,"H2",{});var ht=u(hs);dn=p(ht,"Conclusion"),ht.forEach(a),Fa=i(s),vs=r(s,"P",{});var vt=u(vs);hn=p(vt,"Ideally, JS should\u2019ve sorted an array numerically if all the elements were numbers. But that\u2019s not something in our control. So we have to work with the tools we have. Comparators give us a powerful way of controlling the order of elements after sorting. Knowing how (and when) to use them may save you from writing a few extra lines of code, and maybe a few hours of debugging and cursing at JS."),vt.forEach(a),this.h()},h(){v(H,"class","language-jsx"),v(L,"class","language-jsx"),v(O,"class","language-jsx"),v(D,"class","language-jsx"),v(R,"class","language-jsx"),v(J,"class","language-jsx"),v(M,"class","language-jsx"),v(g,"class","language-jsx"),v(B,"class","language-jsx"),v(W,"class","language-jsx"),v(F,"class","language-jsx"),v(A,"class","language-jsx"),v($,"class","language-jsx"),v(U,"class","language-jsx"),v(z,"class","language-jsx")},m(s,n){t(s,f,n),e(f,w),t(s,E,n),t(s,h,n),e(h,k),e(k,y),e(h,G),e(h,ws),e(ws,$a),e(h,Ua),e(h,Es),e(Es,za),e(h,qa),e(h,xs),e(xs,Ga),e(h,Na),t(s,Qs,n),t(s,H,n),H.innerHTML=yt,t(s,Ks,n),t(s,N,n),e(N,Qa),t(s,Xs,n),t(s,Q,n),e(Q,Ka),t(s,Ys,n),t(s,K,n),e(K,Xa),t(s,Vs,n),t(s,X,n),e(X,Ya),t(s,Zs,n),t(s,Y,n),e(Y,Va),t(s,sa,n),t(s,L,n),L.innerHTML=wt,t(s,aa,n),t(s,V,n),e(V,Za),t(s,ea,n),t(s,O,n),O.innerHTML=Et,t(s,na,n),t(s,b,n),e(b,se),e(b,Ps),e(Ps,ae),e(b,ee),e(b,Ss),e(Ss,ne),e(b,te),e(b,Is),e(Is,oe),e(b,pe),e(b,js),e(js,le),e(b,re),t(s,ta,n),t(s,Z,n),e(Z,ue),t(s,oa,n),t(s,x,n),e(x,ce),e(x,Ts),e(Ts,ie),e(x,fe),e(x,Cs),e(Cs,ke),e(x,me),t(s,pa,n),t(s,ss,n),e(ss,de),t(s,la,n),t(s,D,n),D.innerHTML=xt,t(s,ra,n),t(s,as,n),e(as,he),t(s,ua,n),t(s,R,n),R.innerHTML=Pt,t(s,ca,n),t(s,es,n),e(es,ve),t(s,ia,n),t(s,ns,n),e(ns,be),t(s,fa,n),t(s,_,n),e(_,_e),e(_,Hs),e(Hs,ye),e(_,we),e(_,Ls),e(Ls,Ee),e(_,xe),e(_,Os),e(Os,Pe),e(_,Se),t(s,ka,n),t(s,J,n),J.innerHTML=St,t(s,ma,n),t(s,ts,n),e(ts,Ie),t(s,da,n),t(s,M,n),M.innerHTML=It,t(s,ha,n),t(s,os,n),e(os,je),t(s,va,n),t(s,T,n),e(T,Te),e(T,Ds),e(Ds,Ce),e(T,He),t(s,ba,n),t(s,g,n),g.innerHTML=jt,t(s,_a,n),t(s,m,n),e(m,Le),e(m,Rs),e(Rs,Oe),e(m,De),e(m,Js),e(Js,Re),e(m,Je),e(m,Ms),e(Ms,Me),e(m,ge),e(m,gs),e(gs,Be),e(m,We),e(m,Bs),e(Bs,Fe),e(m,Ae),e(m,Ws),e(Ws,$e),e(m,Ue),e(m,Fs),e(Fs,ze),e(m,qe),e(m,As),e(As,Ge),e(m,Ne),t(s,ya,n),t(s,ps,n),e(ps,Qe),t(s,wa,n),t(s,B,n),B.innerHTML=Tt,t(s,Ea,n),t(s,ls,n),e(ls,Ke),t(s,xa,n),t(s,W,n),W.innerHTML=Ct,t(s,Pa,n),t(s,rs,n),e(rs,Xe),t(s,Sa,n),t(s,F,n),F.innerHTML=Ht,t(s,Ia,n),t(s,us,n),e(us,Ye),t(s,ja,n),t(s,P,n),e(P,$s),e($s,Ve),e(P,Ze),e(P,Us),e(Us,sn),e(P,an),e(P,zs),e(zs,en),t(s,Ta,n),t(s,cs,n),e(cs,nn),t(s,Ca,n),t(s,A,n),A.innerHTML=Lt,t(s,Ha,n),t(s,is,n),e(is,tn),t(s,La,n),t(s,$,n),$.innerHTML=Ot,t(s,Oa,n),t(s,fs,n),e(fs,on),t(s,Da,n),t(s,U,n),U.innerHTML=Dt,t(s,Ra,n),t(s,ks,n),e(ks,pn),t(s,Ja,n),t(s,S,n),e(S,qs),e(qs,ln),e(S,rn),e(S,Gs),e(Gs,un),e(S,cn),e(S,Ns),e(Ns,fn),t(s,Ma,n),t(s,ms,n),e(ms,kn),t(s,ga,n),t(s,z,n),z.innerHTML=Rt,t(s,Ba,n),t(s,ds,n),e(ds,mn),t(s,Wa,n),t(s,hs,n),e(hs,dn),t(s,Fa,n),t(s,vs,n),e(vs,hn)},p:po,d(s){s&&a(f),s&&a(E),s&&a(h),s&&a(Qs),s&&a(H),s&&a(Ks),s&&a(N),s&&a(Xs),s&&a(Q),s&&a(Ys),s&&a(K),s&&a(Vs),s&&a(X),s&&a(Zs),s&&a(Y),s&&a(sa),s&&a(L),s&&a(aa),s&&a(V),s&&a(ea),s&&a(O),s&&a(na),s&&a(b),s&&a(ta),s&&a(Z),s&&a(oa),s&&a(x),s&&a(pa),s&&a(ss),s&&a(la),s&&a(D),s&&a(ra),s&&a(as),s&&a(ua),s&&a(R),s&&a(ca),s&&a(es),s&&a(ia),s&&a(ns),s&&a(fa),s&&a(_),s&&a(ka),s&&a(J),s&&a(ma),s&&a(ts),s&&a(da),s&&a(M),s&&a(ha),s&&a(os),s&&a(va),s&&a(T),s&&a(ba),s&&a(g),s&&a(_a),s&&a(m),s&&a(ya),s&&a(ps),s&&a(wa),s&&a(B),s&&a(Ea),s&&a(ls),s&&a(xa),s&&a(W),s&&a(Pa),s&&a(rs),s&&a(Sa),s&&a(F),s&&a(Ia),s&&a(us),s&&a(ja),s&&a(P),s&&a(Ta),s&&a(cs),s&&a(Ca),s&&a(A),s&&a(Ha),s&&a(is),s&&a(La),s&&a($),s&&a(Oa),s&&a(fs),s&&a(Da),s&&a(U),s&&a(Ra),s&&a(ks),s&&a(Ja),s&&a(S),s&&a(Ma),s&&a(ms),s&&a(ga),s&&a(z),s&&a(Ba),s&&a(ds),s&&a(Wa),s&&a(hs),s&&a(Fa),s&&a(vs)}}}function uo(q){let f,w;const E=[q[0],bn];let h={$$slots:{default:[ro]},$$scope:{ctx:q}};for(let k=0;k<E.length;k+=1)h=vn(h,E[k]);return f=new lo({props:h}),{c(){Zt(f.$$.fragment)},l(k){so(f.$$.fragment,k)},m(k,y){ao(f,k,y),w=!0},p(k,[y]){const G=y&1?eo(E,[y&1&&bt(k[0]),y&0&&bt(bn)]):{};y&2&&(G.$$scope={dirty:y,ctx:k}),f.$set(G)},i(k){w||(no(f.$$.fragment,k),w=!0)},o(k){to(f.$$.fragment,k),w=!1},d(k){oo(f,k)}}}const bn={title:"JS Quirks: Sorting array of numbers",date:"15 August, 2022",categories:["Frontend","Javascript","engineering"],description:"Annoying behaviour of JS while sorting array of numbers, and how to fix it.",author:"Prakash"};function co(q,f,w){return q.$$set=E=>{w(0,f=vn(vn({},f),_t(E)))},f=_t(f),[f]}class io extends Xt{constructor(f){super();Yt(this,f,co,uo,Vt,{})}}var mo=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:io,metadata:bn});export{io as J,mo as _,bn as m};
