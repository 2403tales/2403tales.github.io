import{S as Gt,i as Nt,s as Kt,C as kn,w as Xt,x as Qt,y as Yt,z as Vt,A as mt,q as Zt,o as so,B as ao,P as dt,e as l,t as o,k as u,c as r,a as c,h as p,d as a,m as i,b as v,g as t,I as e,M as eo}from"./vendor-e6930037.js";import{P as no}from"./_posts-0ccc0035.js";function to(z){let f,b,S,C,k,y,q,ys,Aa,$a,ws,Fa,Ua,Gs,T,vt=`<code class="language-jsx">idx <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment">// Sorts in ascending order</span></code>`,Ns,G,za,Ks,N,qa,Xs,K,Ga,Qs,X,Na,Ys,Q,Ka,Vs,H,ht='<code class="language-jsx">ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code>',Zs,Y,Xa,sa,L,bt='<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">YourComponent</span></span> <span class="token attr-name">id_list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ids<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span></code>',aa,h,Qa,Es,Ya,Va,xs,Za,se,Ps,ae,ee,Ss,ne,te,ea,V,oe,na,w,pe,js,le,re,Is,ce,ue,ta,Z,ie,oa,O,_t=`<code class="language-jsx">idx <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
new_idx <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_idx<span class="token punctuation">)</span></code>`,pa,ss,fe,la,D,yt='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> </code>',ra,as,ke,ca,es,me,ua,_,de,Cs,ve,he,Ts,be,_e,Hs,ye,we,ia,R,wt=`<code class="language-jsx">idx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
new_idx <span class="token operator">=</span> idx<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_idx<span class="token punctuation">)</span></code>`,fa,ns,Ee,ka,M,Et='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></code>',ma,ts,xe,da,j,Pe,Ls,Se,je,va,J,xt='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b</code>',ha,m,Ie,Os,Ce,Te,Ds,He,Le,Rs,Oe,De,Ms,Re,Me,Js,Je,Be,Bs,ge,We,gs,Ae,$e,Ws,Fe,Ue,ba,os,ze,_a,B,Pt='<code class="language-jsx">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></code>',ya,ps,qe,wa,g,St='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b</code>',Ea,ls,Ge,xa,W,jt=`<code class="language-jsx"><span class="token comment">// Showing all comparisons for sake of clarity. </span>
<span class="token comment">// Under the hood, sorting algorithm won't run the comparator on all possible pairs</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">11</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">10</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span><span class="token number">1</span></code>`,Pa,rs,Ne,Sa,E,As,Ke,Xe,$s,Qe,Ye,Fs,Ve,ja,cs,Ze,Ia,A,It='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span></code>',Ca,us,sn,Ta,$,Ct='<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a <span class="token comment">// Any guesses on how it will affect the output?</span></code>',Ha,is,an,La,F,Tt=`<code class="language-jsx"><span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">11</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">10</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span></code>`,Oa,fs,en,Da,x,Us,nn,tn,zs,on,pn,qs,ln,Ra,ks,rn,Ma,U,Ht='<code class="language-jsx"><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code>',Ja,ms,cn,Ba,ds,un,ga,vs,fn;return{c(){f=l("p"),b=l("strong"),S=o("TL;DR:"),C=o(" If you\u2019re trying to sort an array of numbers in JS, pass a comparison function. Otherwise, it will consider the datatype of elements as a "),k=l("code"),y=o("string"),q=o(" and will sort based on the first character (So basically, "),ys=l("code"),Aa=o("12"),$a=o(" will come before "),ws=l("code"),Fa=o("2"),Ua=o("). Here\u2019s how you pass a comparison function"),Gs=u(),T=l("pre"),Ns=u(),G=l("h2"),za=o("Background"),Ks=u(),N=l("p"),qa=o("Imagine sitting on your chair, developing a UI for your client. Work is progressing at a steady pace, and you\u2019re trying to figure out a way to optimize the rendering of a component."),Xs=u(),K=l("p"),Ga=o("Suddenly it hits you that if you sort the array you\u2019re sending to your component, then you might be able to reduce the rendering time and improve the UX simultaneously. So you fold your sleeves and get started on the task."),Qs=u(),X=l("h2"),Na=o("Problem Statement"),Ys=u(),Q=l("p"),Ka=o("The task is very simple. Given an array"),Vs=u(),H=l("pre"),Zs=u(),Y=l("p"),Xa=o("Sort it and pass it to your component"),sa=u(),L=l("pre"),aa=u(),h=l("p"),Qa=o("The above snippet should do the job. Right? The code looks intuitive, and I checked "),Es=l("code"),Ya=o("sort"),Va=o(" function returns the sorted array. So it should work. But it doesn\u2019t! Something fishy happens. For some reason, "),xs=l("code"),Za=o("12"),se=o(" comes between "),Ps=l("code"),ae=o("1"),ee=o(" and "),Ss=l("code"),ne=o("2"),te=o("."),ea=u(),V=l("h2"),oe=o("The hustle"),na=u(),w=l("p"),pe=o("Based on the output, it was obvious that the array was sorted in lexicographic order. But why? I double-checked the API response, and it was returning integers. I double-checked the code fetching the API response, it wasn\u2019t doing any explicit "),js=l("code"),le=o("type"),re=o(" conversions. I checked the involved components and didn\u2019t find any explicit "),Is=l("code"),ce=o("type"),ue=o(" conversions there too."),ta=u(),Z=l("p"),ie=o("Finally, being frustrated after 2 hours of debugging, I just opened by browser console and ran these"),oa=u(),O=l("pre"),pa=u(),ss=l("p"),fe=o("To my awful surprise, I found this as output"),la=u(),D=l("pre"),ra=u(),as=l("p"),ke=o("Why JS! Why? Why are you sorting an integer array lexicographically?"),ca=u(),es=l("h2"),me=o("Solution"),ua=u(),_=l("p"),de=o("I never got the answer to the "),Cs=l("code"),ve=o("Why?"),he=o(" JS chooses to do this, but I found out the way to sort numerical arrays correctly. While calling the "),Ts=l("code"),be=o("sort"),_e=o(" function, you have to pass a comparator (The good old "),Hs=l("code"),ye=o("Java"),we=o(" way). So, the correct syntax would be"),ia=u(),R=l("pre"),fa=u(),ns=l("p"),Ee=o("which gives the correct output"),ka=u(),M=l("pre"),ma=u(),ts=l("h3"),xe=o("Comparator"),da=u(),j=l("p"),Pe=o("As the name suggests, Comparator is a function used to "),Ls=l("em"),Se=o("compare"),je=o(" the elements of the array. In the above example, the comparator was"),va=u(),J=l("pre"),ha=u(),m=l("p"),Ie=o("If the output of the comparator is negative, then it means that "),Os=l("code"),Ce=o("a"),Te=o(" is lesser than "),Ds=l("code"),He=o("b"),Le=o(", and hence "),Rs=l("code"),Oe=o("a"),De=o(" should come before "),Ms=l("code"),Re=o("b"),Me=o(" in the sorted array. Conversely, if it is positive, then "),Js=l("code"),Je=o("a"),Be=o(" is greater than "),Bs=l("code"),ge=o("b"),We=o(", and "),gs=l("code"),Ae=o("a"),$e=o(" should come after "),Ws=l("code"),Fe=o("b"),Ue=o(" in the sorted array."),ba=u(),os=l("p"),ze=o("E.g.: Consider"),_a=u(),B=l("pre"),ya=u(),ps=l("p"),qe=o("as input, and"),wa=u(),g=l("pre"),Ea=u(),ls=l("p"),Ge=o("as our comparator. Here are the possible comparisons"),xa=u(),W=l("pre"),Pa=u(),rs=l("p"),Ne=o("The above comparisons tell us that"),Sa=u(),E=l("ul"),As=l("li"),Ke=o("1 will come before 12"),Xe=u(),$s=l("li"),Qe=o("2 will come before 12"),Ye=u(),Fs=l("li"),Ve=o("1 will come before 12"),ja=u(),cs=l("p"),Ze=o("Hence, the final answer you will get is"),Ia=u(),A=l("pre"),Ca=u(),us=l("p"),sn=o("Now, just for fun, let\u2019s tweak the comparator to this"),Ta=u(),$=l("pre"),Ha=u(),is=l("p"),an=o("For the same input, we will get the following comparisons"),La=u(),F=l("pre"),Oa=u(),fs=l("p"),en=o("Based on this, we can conclude that"),Da=u(),x=l("ul"),Us=l("li"),nn=o("1 will come after 12"),tn=u(),zs=l("li"),on=o("2 will come after 12"),pn=u(),qs=l("li"),ln=o("1 will come after 2"),Ra=u(),ks=l("p"),rn=o("Hence the final answer, in this case, will be"),Ma=u(),U=l("pre"),Ja=u(),ms=l("p"),cn=o("which is the input array sorted in descending order."),Ba=u(),ds=l("h2"),un=o("Conclusion"),ga=u(),vs=l("p"),fn=o("Ideally, JS should\u2019ve sorted an array numerically if all the elements were numbers. But that\u2019s not something in our control. So we have to work with the tools we have. Comparators give us a powerful way of controlling the order of elements after sorting. Knowing how (and when) to use them may save you from writing a few extra lines of code, and maybe a few hours of debugging and cursing at JS."),this.h()},l(s){f=r(s,"P",{});var n=c(f);b=r(n,"STRONG",{});var dn=c(b);S=p(dn,"TL;DR:"),dn.forEach(a),C=p(n," If you\u2019re trying to sort an array of numbers in JS, pass a comparison function. Otherwise, it will consider the datatype of elements as a "),k=r(n,"CODE",{});var vn=c(k);y=p(vn,"string"),vn.forEach(a),q=p(n," and will sort based on the first character (So basically, "),ys=r(n,"CODE",{});var hn=c(ys);Aa=p(hn,"12"),hn.forEach(a),$a=p(n," will come before "),ws=r(n,"CODE",{});var bn=c(ws);Fa=p(bn,"2"),bn.forEach(a),Ua=p(n,"). Here\u2019s how you pass a comparison function"),n.forEach(a),Gs=i(s),T=r(s,"PRE",{class:!0});var Lt=c(T);Lt.forEach(a),Ns=i(s),G=r(s,"H2",{});var _n=c(G);za=p(_n,"Background"),_n.forEach(a),Ks=i(s),N=r(s,"P",{});var yn=c(N);qa=p(yn,"Imagine sitting on your chair, developing a UI for your client. Work is progressing at a steady pace, and you\u2019re trying to figure out a way to optimize the rendering of a component."),yn.forEach(a),Xs=i(s),K=r(s,"P",{});var wn=c(K);Ga=p(wn,"Suddenly it hits you that if you sort the array you\u2019re sending to your component, then you might be able to reduce the rendering time and improve the UX simultaneously. So you fold your sleeves and get started on the task."),wn.forEach(a),Qs=i(s),X=r(s,"H2",{});var En=c(X);Na=p(En,"Problem Statement"),En.forEach(a),Ys=i(s),Q=r(s,"P",{});var xn=c(Q);Ka=p(xn,"The task is very simple. Given an array"),xn.forEach(a),Vs=i(s),H=r(s,"PRE",{class:!0});var Ot=c(H);Ot.forEach(a),Zs=i(s),Y=r(s,"P",{});var Pn=c(Y);Xa=p(Pn,"Sort it and pass it to your component"),Pn.forEach(a),sa=i(s),L=r(s,"PRE",{class:!0});var Dt=c(L);Dt.forEach(a),aa=i(s),h=r(s,"P",{});var P=c(h);Qa=p(P,"The above snippet should do the job. Right? The code looks intuitive, and I checked "),Es=r(P,"CODE",{});var Sn=c(Es);Ya=p(Sn,"sort"),Sn.forEach(a),Va=p(P," function returns the sorted array. So it should work. But it doesn\u2019t! Something fishy happens. For some reason, "),xs=r(P,"CODE",{});var jn=c(xs);Za=p(jn,"12"),jn.forEach(a),se=p(P," comes between "),Ps=r(P,"CODE",{});var In=c(Ps);ae=p(In,"1"),In.forEach(a),ee=p(P," and "),Ss=r(P,"CODE",{});var Cn=c(Ss);ne=p(Cn,"2"),Cn.forEach(a),te=p(P,"."),P.forEach(a),ea=i(s),V=r(s,"H2",{});var Tn=c(V);oe=p(Tn,"The hustle"),Tn.forEach(a),na=i(s),w=r(s,"P",{});var hs=c(w);pe=p(hs,"Based on the output, it was obvious that the array was sorted in lexicographic order. But why? I double-checked the API response, and it was returning integers. I double-checked the code fetching the API response, it wasn\u2019t doing any explicit "),js=r(hs,"CODE",{});var Hn=c(js);le=p(Hn,"type"),Hn.forEach(a),re=p(hs," conversions. I checked the involved components and didn\u2019t find any explicit "),Is=r(hs,"CODE",{});var Ln=c(Is);ce=p(Ln,"type"),Ln.forEach(a),ue=p(hs," conversions there too."),hs.forEach(a),ta=i(s),Z=r(s,"P",{});var On=c(Z);ie=p(On,"Finally, being frustrated after 2 hours of debugging, I just opened by browser console and ran these"),On.forEach(a),oa=i(s),O=r(s,"PRE",{class:!0});var Rt=c(O);Rt.forEach(a),pa=i(s),ss=r(s,"P",{});var Dn=c(ss);fe=p(Dn,"To my awful surprise, I found this as output"),Dn.forEach(a),la=i(s),D=r(s,"PRE",{class:!0});var Mt=c(D);Mt.forEach(a),ra=i(s),as=r(s,"P",{});var Rn=c(as);ke=p(Rn,"Why JS! Why? Why are you sorting an integer array lexicographically?"),Rn.forEach(a),ca=i(s),es=r(s,"H2",{});var Mn=c(es);me=p(Mn,"Solution"),Mn.forEach(a),ua=i(s),_=r(s,"P",{});var I=c(_);de=p(I,"I never got the answer to the "),Cs=r(I,"CODE",{});var Jn=c(Cs);ve=p(Jn,"Why?"),Jn.forEach(a),he=p(I," JS chooses to do this, but I found out the way to sort numerical arrays correctly. While calling the "),Ts=r(I,"CODE",{});var Bn=c(Ts);be=p(Bn,"sort"),Bn.forEach(a),_e=p(I," function, you have to pass a comparator (The good old "),Hs=r(I,"CODE",{});var gn=c(Hs);ye=p(gn,"Java"),gn.forEach(a),we=p(I," way). So, the correct syntax would be"),I.forEach(a),ia=i(s),R=r(s,"PRE",{class:!0});var Jt=c(R);Jt.forEach(a),fa=i(s),ns=r(s,"P",{});var Wn=c(ns);Ee=p(Wn,"which gives the correct output"),Wn.forEach(a),ka=i(s),M=r(s,"PRE",{class:!0});var Bt=c(M);Bt.forEach(a),ma=i(s),ts=r(s,"H3",{});var An=c(ts);xe=p(An,"Comparator"),An.forEach(a),da=i(s),j=r(s,"P",{});var Wa=c(j);Pe=p(Wa,"As the name suggests, Comparator is a function used to "),Ls=r(Wa,"EM",{});var $n=c(Ls);Se=p($n,"compare"),$n.forEach(a),je=p(Wa," the elements of the array. In the above example, the comparator was"),Wa.forEach(a),va=i(s),J=r(s,"PRE",{class:!0});var gt=c(J);gt.forEach(a),ha=i(s),m=r(s,"P",{});var d=c(m);Ie=p(d,"If the output of the comparator is negative, then it means that "),Os=r(d,"CODE",{});var Fn=c(Os);Ce=p(Fn,"a"),Fn.forEach(a),Te=p(d," is lesser than "),Ds=r(d,"CODE",{});var Un=c(Ds);He=p(Un,"b"),Un.forEach(a),Le=p(d,", and hence "),Rs=r(d,"CODE",{});var zn=c(Rs);Oe=p(zn,"a"),zn.forEach(a),De=p(d," should come before "),Ms=r(d,"CODE",{});var qn=c(Ms);Re=p(qn,"b"),qn.forEach(a),Me=p(d," in the sorted array. Conversely, if it is positive, then "),Js=r(d,"CODE",{});var Gn=c(Js);Je=p(Gn,"a"),Gn.forEach(a),Be=p(d," is greater than "),Bs=r(d,"CODE",{});var Nn=c(Bs);ge=p(Nn,"b"),Nn.forEach(a),We=p(d,", and "),gs=r(d,"CODE",{});var Kn=c(gs);Ae=p(Kn,"a"),Kn.forEach(a),$e=p(d," should come after "),Ws=r(d,"CODE",{});var Xn=c(Ws);Fe=p(Xn,"b"),Xn.forEach(a),Ue=p(d," in the sorted array."),d.forEach(a),ba=i(s),os=r(s,"P",{});var Qn=c(os);ze=p(Qn,"E.g.: Consider"),Qn.forEach(a),_a=i(s),B=r(s,"PRE",{class:!0});var Wt=c(B);Wt.forEach(a),ya=i(s),ps=r(s,"P",{});var Yn=c(ps);qe=p(Yn,"as input, and"),Yn.forEach(a),wa=i(s),g=r(s,"PRE",{class:!0});var At=c(g);At.forEach(a),Ea=i(s),ls=r(s,"P",{});var Vn=c(ls);Ge=p(Vn,"as our comparator. Here are the possible comparisons"),Vn.forEach(a),xa=i(s),W=r(s,"PRE",{class:!0});var $t=c(W);$t.forEach(a),Pa=i(s),rs=r(s,"P",{});var Zn=c(rs);Ne=p(Zn,"The above comparisons tell us that"),Zn.forEach(a),Sa=i(s),E=r(s,"UL",{});var bs=c(E);As=r(bs,"LI",{});var st=c(As);Ke=p(st,"1 will come before 12"),st.forEach(a),Xe=i(bs),$s=r(bs,"LI",{});var at=c($s);Qe=p(at,"2 will come before 12"),at.forEach(a),Ye=i(bs),Fs=r(bs,"LI",{});var et=c(Fs);Ve=p(et,"1 will come before 12"),et.forEach(a),bs.forEach(a),ja=i(s),cs=r(s,"P",{});var nt=c(cs);Ze=p(nt,"Hence, the final answer you will get is"),nt.forEach(a),Ia=i(s),A=r(s,"PRE",{class:!0});var Ft=c(A);Ft.forEach(a),Ca=i(s),us=r(s,"P",{});var tt=c(us);sn=p(tt,"Now, just for fun, let\u2019s tweak the comparator to this"),tt.forEach(a),Ta=i(s),$=r(s,"PRE",{class:!0});var Ut=c($);Ut.forEach(a),Ha=i(s),is=r(s,"P",{});var ot=c(is);an=p(ot,"For the same input, we will get the following comparisons"),ot.forEach(a),La=i(s),F=r(s,"PRE",{class:!0});var zt=c(F);zt.forEach(a),Oa=i(s),fs=r(s,"P",{});var pt=c(fs);en=p(pt,"Based on this, we can conclude that"),pt.forEach(a),Da=i(s),x=r(s,"UL",{});var _s=c(x);Us=r(_s,"LI",{});var lt=c(Us);nn=p(lt,"1 will come after 12"),lt.forEach(a),tn=i(_s),zs=r(_s,"LI",{});var rt=c(zs);on=p(rt,"2 will come after 12"),rt.forEach(a),pn=i(_s),qs=r(_s,"LI",{});var ct=c(qs);ln=p(ct,"1 will come after 2"),ct.forEach(a),_s.forEach(a),Ra=i(s),ks=r(s,"P",{});var ut=c(ks);rn=p(ut,"Hence the final answer, in this case, will be"),ut.forEach(a),Ma=i(s),U=r(s,"PRE",{class:!0});var qt=c(U);qt.forEach(a),Ja=i(s),ms=r(s,"P",{});var it=c(ms);cn=p(it,"which is the input array sorted in descending order."),it.forEach(a),Ba=i(s),ds=r(s,"H2",{});var ft=c(ds);un=p(ft,"Conclusion"),ft.forEach(a),ga=i(s),vs=r(s,"P",{});var kt=c(vs);fn=p(kt,"Ideally, JS should\u2019ve sorted an array numerically if all the elements were numbers. But that\u2019s not something in our control. So we have to work with the tools we have. Comparators give us a powerful way of controlling the order of elements after sorting. Knowing how (and when) to use them may save you from writing a few extra lines of code, and maybe a few hours of debugging and cursing at JS."),kt.forEach(a),this.h()},h(){v(T,"class","language-jsx"),v(H,"class","language-jsx"),v(L,"class","language-jsx"),v(O,"class","language-jsx"),v(D,"class","language-jsx"),v(R,"class","language-jsx"),v(M,"class","language-jsx"),v(J,"class","language-jsx"),v(B,"class","language-jsx"),v(g,"class","language-jsx"),v(W,"class","language-jsx"),v(A,"class","language-jsx"),v($,"class","language-jsx"),v(F,"class","language-jsx"),v(U,"class","language-jsx")},m(s,n){t(s,f,n),e(f,b),e(b,S),e(f,C),e(f,k),e(k,y),e(f,q),e(f,ys),e(ys,Aa),e(f,$a),e(f,ws),e(ws,Fa),e(f,Ua),t(s,Gs,n),t(s,T,n),T.innerHTML=vt,t(s,Ns,n),t(s,G,n),e(G,za),t(s,Ks,n),t(s,N,n),e(N,qa),t(s,Xs,n),t(s,K,n),e(K,Ga),t(s,Qs,n),t(s,X,n),e(X,Na),t(s,Ys,n),t(s,Q,n),e(Q,Ka),t(s,Vs,n),t(s,H,n),H.innerHTML=ht,t(s,Zs,n),t(s,Y,n),e(Y,Xa),t(s,sa,n),t(s,L,n),L.innerHTML=bt,t(s,aa,n),t(s,h,n),e(h,Qa),e(h,Es),e(Es,Ya),e(h,Va),e(h,xs),e(xs,Za),e(h,se),e(h,Ps),e(Ps,ae),e(h,ee),e(h,Ss),e(Ss,ne),e(h,te),t(s,ea,n),t(s,V,n),e(V,oe),t(s,na,n),t(s,w,n),e(w,pe),e(w,js),e(js,le),e(w,re),e(w,Is),e(Is,ce),e(w,ue),t(s,ta,n),t(s,Z,n),e(Z,ie),t(s,oa,n),t(s,O,n),O.innerHTML=_t,t(s,pa,n),t(s,ss,n),e(ss,fe),t(s,la,n),t(s,D,n),D.innerHTML=yt,t(s,ra,n),t(s,as,n),e(as,ke),t(s,ca,n),t(s,es,n),e(es,me),t(s,ua,n),t(s,_,n),e(_,de),e(_,Cs),e(Cs,ve),e(_,he),e(_,Ts),e(Ts,be),e(_,_e),e(_,Hs),e(Hs,ye),e(_,we),t(s,ia,n),t(s,R,n),R.innerHTML=wt,t(s,fa,n),t(s,ns,n),e(ns,Ee),t(s,ka,n),t(s,M,n),M.innerHTML=Et,t(s,ma,n),t(s,ts,n),e(ts,xe),t(s,da,n),t(s,j,n),e(j,Pe),e(j,Ls),e(Ls,Se),e(j,je),t(s,va,n),t(s,J,n),J.innerHTML=xt,t(s,ha,n),t(s,m,n),e(m,Ie),e(m,Os),e(Os,Ce),e(m,Te),e(m,Ds),e(Ds,He),e(m,Le),e(m,Rs),e(Rs,Oe),e(m,De),e(m,Ms),e(Ms,Re),e(m,Me),e(m,Js),e(Js,Je),e(m,Be),e(m,Bs),e(Bs,ge),e(m,We),e(m,gs),e(gs,Ae),e(m,$e),e(m,Ws),e(Ws,Fe),e(m,Ue),t(s,ba,n),t(s,os,n),e(os,ze),t(s,_a,n),t(s,B,n),B.innerHTML=Pt,t(s,ya,n),t(s,ps,n),e(ps,qe),t(s,wa,n),t(s,g,n),g.innerHTML=St,t(s,Ea,n),t(s,ls,n),e(ls,Ge),t(s,xa,n),t(s,W,n),W.innerHTML=jt,t(s,Pa,n),t(s,rs,n),e(rs,Ne),t(s,Sa,n),t(s,E,n),e(E,As),e(As,Ke),e(E,Xe),e(E,$s),e($s,Qe),e(E,Ye),e(E,Fs),e(Fs,Ve),t(s,ja,n),t(s,cs,n),e(cs,Ze),t(s,Ia,n),t(s,A,n),A.innerHTML=It,t(s,Ca,n),t(s,us,n),e(us,sn),t(s,Ta,n),t(s,$,n),$.innerHTML=Ct,t(s,Ha,n),t(s,is,n),e(is,an),t(s,La,n),t(s,F,n),F.innerHTML=Tt,t(s,Oa,n),t(s,fs,n),e(fs,en),t(s,Da,n),t(s,x,n),e(x,Us),e(Us,nn),e(x,tn),e(x,zs),e(zs,on),e(x,pn),e(x,qs),e(qs,ln),t(s,Ra,n),t(s,ks,n),e(ks,rn),t(s,Ma,n),t(s,U,n),U.innerHTML=Ht,t(s,Ja,n),t(s,ms,n),e(ms,cn),t(s,Ba,n),t(s,ds,n),e(ds,un),t(s,ga,n),t(s,vs,n),e(vs,fn)},p:eo,d(s){s&&a(f),s&&a(Gs),s&&a(T),s&&a(Ns),s&&a(G),s&&a(Ks),s&&a(N),s&&a(Xs),s&&a(K),s&&a(Qs),s&&a(X),s&&a(Ys),s&&a(Q),s&&a(Vs),s&&a(H),s&&a(Zs),s&&a(Y),s&&a(sa),s&&a(L),s&&a(aa),s&&a(h),s&&a(ea),s&&a(V),s&&a(na),s&&a(w),s&&a(ta),s&&a(Z),s&&a(oa),s&&a(O),s&&a(pa),s&&a(ss),s&&a(la),s&&a(D),s&&a(ra),s&&a(as),s&&a(ca),s&&a(es),s&&a(ua),s&&a(_),s&&a(ia),s&&a(R),s&&a(fa),s&&a(ns),s&&a(ka),s&&a(M),s&&a(ma),s&&a(ts),s&&a(da),s&&a(j),s&&a(va),s&&a(J),s&&a(ha),s&&a(m),s&&a(ba),s&&a(os),s&&a(_a),s&&a(B),s&&a(ya),s&&a(ps),s&&a(wa),s&&a(g),s&&a(Ea),s&&a(ls),s&&a(xa),s&&a(W),s&&a(Pa),s&&a(rs),s&&a(Sa),s&&a(E),s&&a(ja),s&&a(cs),s&&a(Ia),s&&a(A),s&&a(Ca),s&&a(us),s&&a(Ta),s&&a($),s&&a(Ha),s&&a(is),s&&a(La),s&&a(F),s&&a(Oa),s&&a(fs),s&&a(Da),s&&a(x),s&&a(Ra),s&&a(ks),s&&a(Ma),s&&a(U),s&&a(Ja),s&&a(ms),s&&a(Ba),s&&a(ds),s&&a(ga),s&&a(vs)}}}function oo(z){let f,b;const S=[z[0],mn];let C={$$slots:{default:[to]},$$scope:{ctx:z}};for(let k=0;k<S.length;k+=1)C=kn(C,S[k]);return f=new no({props:C}),{c(){Xt(f.$$.fragment)},l(k){Qt(f.$$.fragment,k)},m(k,y){Yt(f,k,y),b=!0},p(k,[y]){const q=y&1?Vt(S,[y&1&&mt(k[0]),y&0&&mt(mn)]):{};y&2&&(q.$$scope={dirty:y,ctx:k}),f.$set(q)},i(k){b||(Zt(f.$$.fragment,k),b=!0)},o(k){so(f.$$.fragment,k),b=!1},d(k){ao(f,k)}}}const mn={title:"JS Quirks: Sorting array of numbers",date:"15 August, 2022",categories:["Frontend","Javascript","engineering"],description:"Annoying behaviour of JS while sorting array of numbers, and how to fix it.",author:"Prakash"};function po(z,f,b){return z.$$set=S=>{b(0,f=kn(kn({},f),dt(S)))},f=dt(f),[f]}class lo extends Gt{constructor(f){super();Nt(this,f,po,oo,Kt,{})}}var uo=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:lo,metadata:mn});export{lo as J,uo as _,mn as m};
